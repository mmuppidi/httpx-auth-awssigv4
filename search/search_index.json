{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"httpx-auth-awssigv4 \u00b6 This package provides utilities to add AWS Signature V4 authentication infrormation to calls made by python httpx library. Documentation: https://mmuppidi.github.io/httpx-auth-awssigv4 GitHub: https://github.com/mmuppidi/httpx-auth-awssigv4 PyPI: https://pypi.org/project/httpx-auth-awssigv4/ MIT License Installation \u00b6 pip install httpx-auth-awssigv4 Usage \u00b6 Basic Usage \u00b6 This library has primarily been developed to help add authentication support to httpx library while making calls to REST API deployed using AWS API Gateway service. Will be extended in future to help with calling AWS services. import httpx from httpx_auth_awssigv4 import Sigv4Auth # creating a callable for httpx library auth = Sigv4Auth ( access_key = \"AWS_ACCESS_KEY_ID\" , secret_key = \"AWS_SECRET_ACCESS_KEY\" , service = \"execute-api\" , region = \"us-east-1\" ) # Calling an API endpoint deployed using AWS API Gateway which has # AWS_IAM set as authorization type response = httpx . get ( url = \"https://<API ID>.execute-api.<Region>.amazonaws.com/prod/detials\" , params = { \"username\" : \"tstark\" }, auth = auth ) # Making a post call response = httpx . get ( url = \"https://<API ID>.execute-api.<Region>.amazonaws.com/prod/details\" , params = { \"username\" : \"tstark\" }, json = { \"mission\" : \"avengers\" }, auth = auth ) With STS credentials \u00b6 Sigv4Auth can be used with temporary credentials generated with tools like aws-sso-util . import boto3 from httpx_auth_awssigv4 import Sigv4Auth # fetch temporary credentials from AWS STS service credentials = boto3 . Session ( profile_name = \"<profile>\" ) . get_credentials () # creating a callable for httpx library auth = Sigv4Auth ( access_key = credentials . access_key , secret_key = credentials . secret_key , token = credentials . token service = \"execute-api\" , region = \"us-east-1\" ) Sigv4Auth can also be used with temporary credentials from AWS STS. import boto3 from httpx_auth_awssigv4 import Sigv4Auth # role with `execute-api` permissions ROLE_ARN = \"arn:aws:iam::<ACCOUNT ID>:role/<ROLE NAME\" # fetch temporary credentials from AWS STS service credentials = boto3 . client ( 'sts' ) . assume_role ( RoleArn = ROLE_ARN , RoleSessionName = \"httpxcall\" )[ \"Credentials\" ] # creating a callable for httpx library auth = Sigv4Auth ( access_key = credentials [ \"AccessKeyId\" ], secret_key = credentials [ \"SecretAccessKey\" ], token = credentials [ \"SessionToken\" ] service = \"execute-api\" , region = \"us-east-1\" ) ToDo \u00b6 Add examples on usage along with API backend deployment instructions. Test the library with AWS services and add integration tests. Credits \u00b6 This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#httpx-auth-awssigv4","text":"This package provides utilities to add AWS Signature V4 authentication infrormation to calls made by python httpx library. Documentation: https://mmuppidi.github.io/httpx-auth-awssigv4 GitHub: https://github.com/mmuppidi/httpx-auth-awssigv4 PyPI: https://pypi.org/project/httpx-auth-awssigv4/ MIT License","title":"httpx-auth-awssigv4"},{"location":"#installation","text":"pip install httpx-auth-awssigv4","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"#basic-usage","text":"This library has primarily been developed to help add authentication support to httpx library while making calls to REST API deployed using AWS API Gateway service. Will be extended in future to help with calling AWS services. import httpx from httpx_auth_awssigv4 import Sigv4Auth # creating a callable for httpx library auth = Sigv4Auth ( access_key = \"AWS_ACCESS_KEY_ID\" , secret_key = \"AWS_SECRET_ACCESS_KEY\" , service = \"execute-api\" , region = \"us-east-1\" ) # Calling an API endpoint deployed using AWS API Gateway which has # AWS_IAM set as authorization type response = httpx . get ( url = \"https://<API ID>.execute-api.<Region>.amazonaws.com/prod/detials\" , params = { \"username\" : \"tstark\" }, auth = auth ) # Making a post call response = httpx . get ( url = \"https://<API ID>.execute-api.<Region>.amazonaws.com/prod/details\" , params = { \"username\" : \"tstark\" }, json = { \"mission\" : \"avengers\" }, auth = auth )","title":"Basic Usage"},{"location":"#with-sts-credentials","text":"Sigv4Auth can be used with temporary credentials generated with tools like aws-sso-util . import boto3 from httpx_auth_awssigv4 import Sigv4Auth # fetch temporary credentials from AWS STS service credentials = boto3 . Session ( profile_name = \"<profile>\" ) . get_credentials () # creating a callable for httpx library auth = Sigv4Auth ( access_key = credentials . access_key , secret_key = credentials . secret_key , token = credentials . token service = \"execute-api\" , region = \"us-east-1\" ) Sigv4Auth can also be used with temporary credentials from AWS STS. import boto3 from httpx_auth_awssigv4 import Sigv4Auth # role with `execute-api` permissions ROLE_ARN = \"arn:aws:iam::<ACCOUNT ID>:role/<ROLE NAME\" # fetch temporary credentials from AWS STS service credentials = boto3 . client ( 'sts' ) . assume_role ( RoleArn = ROLE_ARN , RoleSessionName = \"httpxcall\" )[ \"Credentials\" ] # creating a callable for httpx library auth = Sigv4Auth ( access_key = credentials [ \"AccessKeyId\" ], secret_key = credentials [ \"SecretAccessKey\" ], token = credentials [ \"SessionToken\" ] service = \"execute-api\" , region = \"us-east-1\" )","title":"With STS credentials"},{"location":"#todo","text":"Add examples on usage along with API backend deployment instructions. Test the library with AWS services and add integration tests.","title":"ToDo"},{"location":"#credits","text":"This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"Top-level package for httpx-auth-awssigv4. auth \u00b6 Utility to help with SigV4 authentication for httpx python library. Reference: https://docs.aws.amazon.com/general/latest/gr/sigv4-signed-request-examples.html SigV4Auth \u00b6 Auth class to provide AWS Sigv4 authentication support to httpx library. When we send API requests to AWS, we need to sign the requests so that AWS can identify who sent them. To sign the requests we use Signature V4 process to sign API requests. Instantiation of this class creates an auth object that python httpx library can use to sign the API requests before sending them to AWS. Note This class only supports adding authorization header as part of the request and doesn't support adding authorization header in query string Usage: import httpx from httpx_auth_awssigv4 import Sigv4Auth auth = Sigv4Auth( access_key: \"AWS_ACCESS_KEY_ID\", secret_key: \"AWS_SECRET_ACCESS_KEY\", service: \"execute-api\", region: \"us-east-1\" ) response = httpx.get( url=\"https://<API ID>.execute-api.<Region>.amazonaws.com/prod/detials\", params={\"username\": \"tstark\"}, auth=auth ) Parameters: Name Type Description Default access_key str AWS access key required secret_key str AWS secret access key required service str Name of the service request is being made to required region str AWS region to which the API request is being sent to required token Optional[str] AWS Session token in case of temporary crendentials. Defaults to None. required __call__ ( self , request ) special \u00b6 The httpx library calls this method before sending the API request. Parameters: Name Type Description Default request Request API request information as a httpx Request required Returns: Type Description Request Request : Modified request signed with AWS crdentials using Signature v4 process Source code in httpx_auth_awssigv4/auth.py def __call__ ( self , request : Request ) -> Request : \"\"\"The httpx library calls this method before sending the API request. Args: request (Request): API request information as a httpx Request Returns: Request : Modified request signed with AWS crdentials using Signature v4 process \"\"\" # Create a date for headers and the credential string current_time = datetime . utcnow () timestamp = current_time . strftime ( \"%Y%m %d T%H%M%SZ\" ) datestamp = current_time . strftime ( \"%Y%m %d \" ) # Date w/o time, used in credential scope # CREATE A CANONICAL REQUEST canonical_request = self . get_canonical_request ( request = request , timestamp = timestamp ) # CREATE THE STRING TO SIGN credential_scope = f \" { datestamp } / { self . _region } / { self . _service } /aws4_request\" string_to_sign = ( f \" { self . _algorithm } \\n { timestamp } \\n { credential_scope } \\n \" f ' { hashlib . sha256 ( canonical_request . encode ( \"utf-8\" )) . hexdigest () } ' ) # CALCULATE THE SIGNATURE signing_key = self . get_signature_key ( datestamp ) signature = hmac . new ( signing_key , ( string_to_sign ) . encode ( \"utf-8\" ), hashlib . sha256 ) . hexdigest () # ADD SIGNING INFORMATION TO THE REQUEST authorization_header = self . get_authorization_header ( credential_scope = credential_scope , signature = signature ) headers = { \"x-amz-date\" : timestamp , \"Authorization\" : authorization_header , } if self . _token : headers [ \"X-Amz-Security-Token\" ] = self . _token request . headers . update ( headers ) return request __init__ ( self , access_key , secret_key , service , region , token = None ) special \u00b6 Auth class to provide AWS Sigv4 authentication support to httpx library. Parameters: Name Type Description Default access_key str AWS access key required secret_key str AWS secret access key required service str Name of the service request is being made to required region str AWS region to which the API request is being sent to required token Optional[str] AWS Session token in case of temporary crendentials. Defaults to None. None Source code in httpx_auth_awssigv4/auth.py def __init__ ( self , access_key : str , secret_key : str , service : str , region : str , token : Optional [ str ] = None ): \"\"\"Auth class to provide AWS Sigv4 authentication support to httpx library. Args: access_key (str): AWS access key secret_key (str): AWS secret access key service (str): Name of the service request is being made to region (str): AWS region to which the API request is being sent to token (Optional[str], optional): AWS Session token in case of temporary crendentials. Defaults to None. \"\"\" self . _access_key = access_key self . _secret_key = secret_key self . _token = token self . _service = service self . _region = region self . _signed_headers = \"host;x-amz-date\" # the hashing algorithm that you use to calculate the digests in the canonical request self . _algorithm = \"AWS4-HMAC-SHA256\" get_authorization_header ( self , credential_scope , signature ) \u00b6 Constructs \"Authorization\" header to include in the request. Parameters: Name Type Description Default credential_scope str String that includes the date, the Region you are targeting, the service you are requesting, and a termination string required signature str calculated signature to include in Authorization header required Returns: Type Description str Source code in httpx_auth_awssigv4/auth.py def get_authorization_header ( self , credential_scope : str , signature : str ) -> str : \"\"\"Constructs \"Authorization\" header to include in the request. Args: credential_scope (str): String that includes the date, the Region you are targeting, the service you are requesting, and a termination string signature (str): calculated signature to include in Authorization header Returns: str: String to send under \"Authorization\" header \"\"\" return ( f \" { self . _algorithm } Credential= { self . _access_key } / { credential_scope } ,\" f \" SignedHeaders= { self . _signed_headers } , Signature= { signature } \" ) get_canonical_request ( self , request , timestamp ) \u00b6 Creates a canonical request. This function returns information from your request in a standardized (canonical) format. Read more about Cananolical requests below https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html Parameters: Name Type Description Default request Request httpx Request object required timestamp str The date is specified with ISO8601 basic format in the x-amz-date header in the format YYYYMMDD'T'HHMMSS'Z' required Returns: Type Description str Source code in httpx_auth_awssigv4/auth.py def get_canonical_request ( self , request : Request , timestamp : str ) -> str : \"\"\"Creates a canonical request. This function returns information from your request in a standardized (canonical) format. Read more about Cananolical requests below https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html Args: request (Request): httpx Request object timestamp (str): The date is specified with ISO8601 basic format in the x-amz-date header in the format YYYYMMDD'T'HHMMSS'Z' Returns: str: request infromation in a canonical format \"\"\" canonical_uri = request . url . path canonical_querystring = request . url . query . decode ( \"utf-8\" ) canonical_headers = f \"host: { request . url . host } \\n x-amz-date: { timestamp } \\n \" if request . content : payload_hash = hashlib . sha256 ( request . content ) . hexdigest () else : payload_hash = hashlib . sha256 (( \"\" ) . encode ( \"utf-8\" )) . hexdigest () canonical_request = ( f \" { request . method } \\n { canonical_uri } \\n { canonical_querystring } \\n \" f \" { canonical_headers } \\n { self . _signed_headers } \\n { payload_hash } \" ) return canonical_request get_signature_key ( self , date_stamp ) \u00b6 Creates a signing key derived from secret key. Read more about creating a signing key in the following page Ref: https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html Parameters: Name Type Description Default date_stamp str date used in credential scope, should be in '%Y%m%d' format required Returns: Type Description bytes Source code in httpx_auth_awssigv4/auth.py def get_signature_key ( self , date_stamp : str ) -> bytes : \"\"\"Creates a signing key derived from secret key. Read more about creating a signing key in the following page Ref: https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html Args: date_stamp (str): date used in credential scope, should be in '%Y%m%d' format Returns: str: Signing key derived from secret key \"\"\" def sign ( key , msg ): return hmac . new ( key , msg . encode ( \"utf-8\" ), hashlib . sha256 ) . digest () date = sign (( \"AWS4\" + self . _secret_key ) . encode ( \"utf-8\" ), date_stamp ) region = sign ( date , self . _region ) service = sign ( region , self . _service ) signing = sign ( service , \"aws4_request\" ) return signing","title":"Modules"},{"location":"api/#httpx_auth_awssigv4.auth","text":"Utility to help with SigV4 authentication for httpx python library. Reference: https://docs.aws.amazon.com/general/latest/gr/sigv4-signed-request-examples.html","title":"auth"},{"location":"api/#httpx_auth_awssigv4.auth.SigV4Auth","text":"Auth class to provide AWS Sigv4 authentication support to httpx library. When we send API requests to AWS, we need to sign the requests so that AWS can identify who sent them. To sign the requests we use Signature V4 process to sign API requests. Instantiation of this class creates an auth object that python httpx library can use to sign the API requests before sending them to AWS. Note This class only supports adding authorization header as part of the request and doesn't support adding authorization header in query string Usage: import httpx from httpx_auth_awssigv4 import Sigv4Auth auth = Sigv4Auth( access_key: \"AWS_ACCESS_KEY_ID\", secret_key: \"AWS_SECRET_ACCESS_KEY\", service: \"execute-api\", region: \"us-east-1\" ) response = httpx.get( url=\"https://<API ID>.execute-api.<Region>.amazonaws.com/prod/detials\", params={\"username\": \"tstark\"}, auth=auth ) Parameters: Name Type Description Default access_key str AWS access key required secret_key str AWS secret access key required service str Name of the service request is being made to required region str AWS region to which the API request is being sent to required token Optional[str] AWS Session token in case of temporary crendentials. Defaults to None. required","title":"SigV4Auth"},{"location":"api/#httpx_auth_awssigv4.auth.SigV4Auth.__call__","text":"The httpx library calls this method before sending the API request. Parameters: Name Type Description Default request Request API request information as a httpx Request required Returns: Type Description Request Request : Modified request signed with AWS crdentials using Signature v4 process Source code in httpx_auth_awssigv4/auth.py def __call__ ( self , request : Request ) -> Request : \"\"\"The httpx library calls this method before sending the API request. Args: request (Request): API request information as a httpx Request Returns: Request : Modified request signed with AWS crdentials using Signature v4 process \"\"\" # Create a date for headers and the credential string current_time = datetime . utcnow () timestamp = current_time . strftime ( \"%Y%m %d T%H%M%SZ\" ) datestamp = current_time . strftime ( \"%Y%m %d \" ) # Date w/o time, used in credential scope # CREATE A CANONICAL REQUEST canonical_request = self . get_canonical_request ( request = request , timestamp = timestamp ) # CREATE THE STRING TO SIGN credential_scope = f \" { datestamp } / { self . _region } / { self . _service } /aws4_request\" string_to_sign = ( f \" { self . _algorithm } \\n { timestamp } \\n { credential_scope } \\n \" f ' { hashlib . sha256 ( canonical_request . encode ( \"utf-8\" )) . hexdigest () } ' ) # CALCULATE THE SIGNATURE signing_key = self . get_signature_key ( datestamp ) signature = hmac . new ( signing_key , ( string_to_sign ) . encode ( \"utf-8\" ), hashlib . sha256 ) . hexdigest () # ADD SIGNING INFORMATION TO THE REQUEST authorization_header = self . get_authorization_header ( credential_scope = credential_scope , signature = signature ) headers = { \"x-amz-date\" : timestamp , \"Authorization\" : authorization_header , } if self . _token : headers [ \"X-Amz-Security-Token\" ] = self . _token request . headers . update ( headers ) return request","title":"__call__()"},{"location":"api/#httpx_auth_awssigv4.auth.SigV4Auth.__init__","text":"Auth class to provide AWS Sigv4 authentication support to httpx library. Parameters: Name Type Description Default access_key str AWS access key required secret_key str AWS secret access key required service str Name of the service request is being made to required region str AWS region to which the API request is being sent to required token Optional[str] AWS Session token in case of temporary crendentials. Defaults to None. None Source code in httpx_auth_awssigv4/auth.py def __init__ ( self , access_key : str , secret_key : str , service : str , region : str , token : Optional [ str ] = None ): \"\"\"Auth class to provide AWS Sigv4 authentication support to httpx library. Args: access_key (str): AWS access key secret_key (str): AWS secret access key service (str): Name of the service request is being made to region (str): AWS region to which the API request is being sent to token (Optional[str], optional): AWS Session token in case of temporary crendentials. Defaults to None. \"\"\" self . _access_key = access_key self . _secret_key = secret_key self . _token = token self . _service = service self . _region = region self . _signed_headers = \"host;x-amz-date\" # the hashing algorithm that you use to calculate the digests in the canonical request self . _algorithm = \"AWS4-HMAC-SHA256\"","title":"__init__()"},{"location":"api/#httpx_auth_awssigv4.auth.SigV4Auth.get_authorization_header","text":"Constructs \"Authorization\" header to include in the request. Parameters: Name Type Description Default credential_scope str String that includes the date, the Region you are targeting, the service you are requesting, and a termination string required signature str calculated signature to include in Authorization header required Returns: Type Description str Source code in httpx_auth_awssigv4/auth.py def get_authorization_header ( self , credential_scope : str , signature : str ) -> str : \"\"\"Constructs \"Authorization\" header to include in the request. Args: credential_scope (str): String that includes the date, the Region you are targeting, the service you are requesting, and a termination string signature (str): calculated signature to include in Authorization header Returns: str: String to send under \"Authorization\" header \"\"\" return ( f \" { self . _algorithm } Credential= { self . _access_key } / { credential_scope } ,\" f \" SignedHeaders= { self . _signed_headers } , Signature= { signature } \" )","title":"get_authorization_header()"},{"location":"api/#httpx_auth_awssigv4.auth.SigV4Auth.get_canonical_request","text":"Creates a canonical request. This function returns information from your request in a standardized (canonical) format. Read more about Cananolical requests below https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html Parameters: Name Type Description Default request Request httpx Request object required timestamp str The date is specified with ISO8601 basic format in the x-amz-date header in the format YYYYMMDD'T'HHMMSS'Z' required Returns: Type Description str Source code in httpx_auth_awssigv4/auth.py def get_canonical_request ( self , request : Request , timestamp : str ) -> str : \"\"\"Creates a canonical request. This function returns information from your request in a standardized (canonical) format. Read more about Cananolical requests below https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html Args: request (Request): httpx Request object timestamp (str): The date is specified with ISO8601 basic format in the x-amz-date header in the format YYYYMMDD'T'HHMMSS'Z' Returns: str: request infromation in a canonical format \"\"\" canonical_uri = request . url . path canonical_querystring = request . url . query . decode ( \"utf-8\" ) canonical_headers = f \"host: { request . url . host } \\n x-amz-date: { timestamp } \\n \" if request . content : payload_hash = hashlib . sha256 ( request . content ) . hexdigest () else : payload_hash = hashlib . sha256 (( \"\" ) . encode ( \"utf-8\" )) . hexdigest () canonical_request = ( f \" { request . method } \\n { canonical_uri } \\n { canonical_querystring } \\n \" f \" { canonical_headers } \\n { self . _signed_headers } \\n { payload_hash } \" ) return canonical_request","title":"get_canonical_request()"},{"location":"api/#httpx_auth_awssigv4.auth.SigV4Auth.get_signature_key","text":"Creates a signing key derived from secret key. Read more about creating a signing key in the following page Ref: https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html Parameters: Name Type Description Default date_stamp str date used in credential scope, should be in '%Y%m%d' format required Returns: Type Description bytes Source code in httpx_auth_awssigv4/auth.py def get_signature_key ( self , date_stamp : str ) -> bytes : \"\"\"Creates a signing key derived from secret key. Read more about creating a signing key in the following page Ref: https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html Args: date_stamp (str): date used in credential scope, should be in '%Y%m%d' format Returns: str: Signing key derived from secret key \"\"\" def sign ( key , msg ): return hmac . new ( key , msg . encode ( \"utf-8\" ), hashlib . sha256 ) . digest () date = sign (( \"AWS4\" + self . _secret_key ) . encode ( \"utf-8\" ), date_stamp ) region = sign ( date , self . _region ) service = sign ( region , self . _service ) signing = sign ( service , \"aws4_request\" ) return signing","title":"get_signature_key()"},{"location":"changelog/","text":"Changelog \u00b6 [0.1.4] (2022-04-03) \u00b6 Added \u00b6 README has basic docuemntation and usage examples SigV4Auth class can now support IAM User credentials and temporary credentials from STS [0.1.3] (2022-04-03) \u00b6 Added \u00b6 Initial version of httpx-auth-awssigv4 package","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#014-2022-04-03","text":"","title":"[0.1.4] (2022-04-03)"},{"location":"changelog/#added","text":"README has basic docuemntation and usage examples SigV4Auth class can now support IAM User credentials and temporary credentials from STS","title":"Added"},{"location":"changelog/#013-2022-04-03","text":"","title":"[0.1.3] (2022-04-03)"},{"location":"changelog/#added_1","text":"Initial version of httpx-auth-awssigv4 package","title":"Added"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/mmuppidi/httpx-auth-awssigv4/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 httpx-auth-awssigv4 could always use more documentation, whether as part of the official httpx-auth-awssigv4 docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/mmuppidi/httpx-auth-awssigv4/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up httpx-auth-awssigv4 for local development. Fork the httpx-auth-awssigv4 repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/httpx-auth-awssigv4.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/mmuppidi/httpx-auth-awssigv4/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_httpx_auth_awssigv4.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/mmuppidi/httpx-auth-awssigv4/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"httpx-auth-awssigv4 could always use more documentation, whether as part of the official httpx-auth-awssigv4 docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/mmuppidi/httpx-auth-awssigv4/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up httpx-auth-awssigv4 for local development. Fork the httpx-auth-awssigv4 repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/httpx-auth-awssigv4.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/mmuppidi/httpx-auth-awssigv4/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_httpx_auth_awssigv4.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install httpx-auth-awssigv4, run this command in your terminal: $ pip install httpx-auth-awssigv4 This is the preferred method to install httpx-auth-awssigv4, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for httpx-auth-awssigv4 can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/mmuppidi/httpx-auth-awssigv4 Or download the tarball : $ curl -OJL https://github.com/mmuppidi/httpx-auth-awssigv4/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install httpx-auth-awssigv4, run this command in your terminal: $ pip install httpx-auth-awssigv4 This is the preferred method to install httpx-auth-awssigv4, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for httpx-auth-awssigv4 can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/mmuppidi/httpx-auth-awssigv4 Or download the tarball : $ curl -OJL https://github.com/mmuppidi/httpx-auth-awssigv4/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use httpx-auth-awssigv4 in a project import httpx_auth_awssigv4","title":"Usage"},{"location":"usage/#usage","text":"To use httpx-auth-awssigv4 in a project import httpx_auth_awssigv4","title":"Usage"}]}